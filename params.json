{"name":"MarkdownLog","tagline":"Lightweight .NET component for programmatically generating Markdown. Useful for producing rich diagnostic logs with minimal dependencies.","body":"[![Build status](https://ci.appveyor.com/api/projects/status/k15974djmygb9f13)](https://ci.appveyor.com/project/Wheelies/markdownlog)\r\n\r\nTable example\r\n-------------\r\n\r\n    var data = new[]\r\n    {\r\n        new{Year = 1991, Album = \"Out of Time\", Songs=11, Rating = \"* * * *\"},\r\n        new{Year = 1992, Album = \"Automatic for the People\", Songs=12, Rating = \"* * * * *\"},\r\n        new{Year = 1994, Album = \"Monster\", Songs=12, Rating = \"* * *\"}\r\n    };\r\n\r\n    Console.Write(data.ToMarkdownTable().ToMarkdown());\r\n    \r\n    // Produces:\r\n    //\r\n    //     Year | Album                    | Songs | Rating   \r\n    //     ----:| ------------------------ | -----:| --------- \r\n    //     1991 | Out of Time              |    11 | * * * *  \r\n    //     1992 | Automatic for the People |    12 | * * * * *\r\n    //     1994 | Monster                  |    12 | * * *    \r\n\r\n\r\nBar Chart example\r\n----------------\r\n\r\n    var worldCup = new Dictionary<string, int>\r\n    {\r\n        {\"Brazil\", 5},\r\n        {\"Italy\", 4},\r\n        {\"Germany\", 3},\r\n        {\"Argentina\", 2},\r\n        {\"Uruguay\", 2},\r\n        {\"France\", 1},\r\n        {\"Spain\", 1},\r\n        {\"England\", 1}\r\n    };\r\n\r\n    Console.Write(worldCup.ToMarkdownBarChart().ToMarkdown());\r\n    \r\n    // Produces:\r\n    //\r\n    //    Brazil    |#####  5\r\n    //    Italy     |####  4\r\n    //    Germany   |###  3\r\n    //    Argentina |##  2\r\n    //    Uruguay   |##  2\r\n    //    France    |#  1\r\n    //    Spain     |#  1\r\n    //    England   |#  1\r\n    //              ------\r\n\r\n\r\nNumbered list example \r\n---------------------\r\n\r\n    var planets = new[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\r\n    Console.Write(planets.ToMarkdownNumberedList().ToMarkdown());\r\n    \r\n    // Produces:\r\n    //\r\n    //    1. Mercury\r\n    //    2. Venus\r\n    //    3. Earth\r\n    //    4. Mars\r\n    //    5. Jupiter\r\n    //    6. Saturn\r\n    //    7. Uranus\r\n    //    8. Neptune\r\n\r\n\r\n\r\nThe library was originally developed by [BlackJet Software](http://blackjetsoftware.com) to produce a report of performance test results for an [iOS application](http://shoppingukapp.com/). Markdown was chosen because it can be quickly produced and read without the need for additional 3rd party libraries yet, at the same time, it is capable of representing rich data structures, such as lists, bar charts and tables, that can be easily converted into HTML for inclusion in professional quality reports.\r\n\r\nMarkdownLog can produce all the standard Markdown features described in John Gruber's [original spec](http://daringfireball.net/projects/markdown/); such as headings, word-wrapped paragraphs, bulleted and numbered lists, block quotes; in addition to GitHub flavoured tables, and representations of other data structures that are useful for outputting to diagnostic logs, such as bar charts and iOS style UIListView representations.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}