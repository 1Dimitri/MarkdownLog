{"name":"MarkdownLog","tagline":"Lightweight .NET component for programmatically generating Markdown. Useful for producing rich diagnostic logs with minimal dependencies.","body":"[![Build status](https://ci.appveyor.com/api/projects/status/utok6islevjr35le)](https://ci.appveyor.com/project/Wheelies/markdownlog)\r\n\r\nMarkdown is a great format for representing an application's internal data structures for debugging and diagnostic purposes. It is a flexible format that is readable in its raw form yet capable of being transformed into HTML for documentation or reporting.\r\n\r\nMarkdownLog can produce all features described in John Gruber's [original spec](http://daringfireball.net/projects/markdown/) from common .NET types.\r\n\r\nTables\r\n------\r\n\r\nThis is how a table is built from a List of objects:\r\n\r\n    var data = new[]\r\n    {\r\n        new{Year = 1991, Album = \"Out of Time\", Songs=11, Rating = \"* * * *\"},\r\n        new{Year = 1992, Album = \"Automatic for the People\", Songs=12, Rating = \"* * * * *\"},\r\n        new{Year = 1994, Album = \"Monster\", Songs=12, Rating = \"* * *\"}\r\n    };\r\n\r\n    Console.Write(data.ToMarkdownTable());\r\n    \r\n    // Produces:\r\n    //\r\n    //     Year | Album                    | Songs | Rating   \r\n    //     ----:| ------------------------ | -----:| --------- \r\n    //     1991 | Out of Time              |    11 | * * * *  \r\n    //     1992 | Automatic for the People |    12 | * * * * *\r\n    //     1994 | Monster                  |    12 | * * *    \r\n\r\nOnce passed through a GitHub-flavoured parser, you get a HTML table, complete with headings and alignments:\r\n\r\n    Year | Album                    | Songs | Rating   \r\n    ----:| ------------------------ | -----:| --------- \r\n    1991 | Out of Time              |    11 | * * * *  \r\n    1992 | Automatic for the People |    12 | * * * * *\r\n    1994 | Monster                  |    12 | * * *    \r\n\r\nLists\r\n-----\r\n\r\nA collection can be output as a numbered list:\r\n\r\n    var planets = new[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\r\n    Console.Write(planets.ToMarkdownNumberedList());\r\n    \r\n    // Produces:\r\n    //\r\n    //    1. Mercury\r\n    //    2. Venus\r\n    //    3. Earth\r\n    //    4. Mars\r\n    //    5. Jupiter\r\n    //    6. Saturn\r\n    //    7. Uranus\r\n    //    8. Neptune\r\n\r\nWhen passed through a Markdown parser, this becomes:\r\n\r\n   1. Mercury\r\n   2. Venus\r\n   3. Earth\r\n   4. Mars\r\n   5. Jupiter\r\n   6. Saturn\r\n   7. Uranus\r\n   8. Neptune\r\n\r\nAlternatively, the list can have bullets:\r\n\r\n    var beatles = new[] { \"John\", \"Paul\", \"Ringo\", \"George\" };\r\n    Console.Write(beatles.ToMarkdownBulettedList());\r\n\t\r\n\t//Produces:\r\n\t//\r\n    //   * John\r\n    //   * Paul\r\n    //   * Ringo\r\n    //   * George\r\n\r\nThis is parsed to:\r\n\r\n   * John\r\n   * Paul\r\n   * Ringo\r\n   * George\r\n\r\n\r\nBar Chart example\r\n----------------\r\n\r\nA barchart can be produced from a collection of KeyValue or Tuple objects\r\n\r\n    var worldCup = new Dictionary<string, int>\r\n    {\r\n        {\"Brazil\", 5},\r\n        {\"Italy\", 4},\r\n        {\"Germany\", 4},\r\n        {\"Argentina\", 2},\r\n        {\"Uruguay\", 2},\r\n        {\"France\", 1},\r\n        {\"Spain\", 1},\r\n        {\"England\", 1}\r\n    };\r\n\r\n    Console.Write(worldCup.ToMarkdownBarChart());\r\n    \r\n    // Produces:\r\n    //\r\n    //    Brazil    |#####  5\r\n    //    Italy     |####  4\r\n    //    Germany   |####  4\r\n    //    Argentina |##  2\r\n    //    Uruguay   |##  2\r\n    //    France    |#  1\r\n    //    Spain     |#  1\r\n    //    England   |#  1\r\n    //              ------\r\n\r\nBar charts are not supported by standard Markdown. When a barchart is passed through a Markdown parser, it is rendered as a code block that retains its structure:\r\n\r\n    Brazil    |#####  5\r\n    Italy     |####  4\r\n    Germany   |####  4\r\n    Argentina |##  2\r\n    Uruguay   |##  2\r\n    France    |#  1\r\n    Spain     |#  1\r\n    England   |#  1\r\n              ------\r\n\r\nA bar chart can be produced from floating point and negative numbers and scaling can be applied as desired:\r\n\r\n\r\n    const int valueCount = 20;\r\n    var chart = new BarChart\r\n    {\r\n        ScaleAlways = true,\r\n        MaximumChartWidth = 40,\r\n        DataPoints = from i in Enumerable.Range(0, valueCount)\r\n            let rad = (i * 2.0 * Math.PI) / valueCount\r\n            select new BarChartDataPoint\r\n            {\r\n                CategoryName = string.Format(\"Cos({0:0.0})\", rad),\r\n                Value = Math.Cos(rad)\r\n            }\r\n    };\r\n\r\nThis produces:\r\n\r\n    Cos(0.0)                     |####################  1\r\n    Cos(0.3)                     |###################  0.95\r\n    Cos(0.6)                     |################  0.81\r\n    Cos(0.9)                     |############  0.59\r\n    Cos(1.3)                     |######  0.31\r\n    Cos(1.6)                     |  0\r\n    Cos(1.9)               ######|  -0.31\r\n    Cos(2.2)         ############|  -0.59\r\n    Cos(2.5)     ################|  -0.81\r\n    Cos(2.8)  ###################|  -0.95\r\n    Cos(3.1) ####################|  -1\r\n    Cos(3.5)  ###################|  -0.95\r\n    Cos(3.8)     ################|  -0.81\r\n    Cos(4.1)         ############|  -0.59\r\n    Cos(4.4)               ######|  -0.31\r\n    Cos(4.7)                     |  0\r\n    Cos(5.0)                     |######  0.31\r\n    Cos(5.3)                     |############  0.59\r\n    Cos(5.7)                     |################  0.81\r\n    Cos(6.0)                     |###################  0.95\r\n             -----------------------------------------\r\n\r\nParagraphs\r\n----------\r\n\r\nStrings can be written as a word-wrapped paragraph:\r\n\r\n    var text =\"Lolita, light of my life, fire of my loins. My sin, my soul. Lo-lee-ta: the tip of the tongue taking a trip of three steps down the palate to tap, at three, on the teeth. Lo. Lee. Ta.\";\r\n    \r\n    Console.Write(text.ToMarkdownParagraph());\r\n\r\n    // Produces:\r\n\t//\r\n\t// Lolita, light of my life, fire of my loins. My sin, my soul. Lo-lee-ta: the tip \r\n    // of the tongue taking a trip of three steps down the palate to tap, at three, on \r\n    // the teeth. Lo. Lee. Ta.\r\n\r\nAfter parsing, this becomes:\r\n\r\nLolita, light of my life, fire of my loins. My sin, my soul. Lo-lee-ta: the tip \r\nof the tongue taking a trip of three steps down the palate to tap, at three, on \r\nthe teeth. Lo. Lee. Ta.\r\n\r\n---\r\n\r\nMarkdownLog was originally developed by [BlackJet Software](http://blackjetsoftware.com) to produce a report of performance test results for an [iOS application](http://shoppingukapp.com/). It is maintained by [Wheelies](https://github.com/Wheelies)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}